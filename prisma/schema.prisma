// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  contents  Content[]
  votes     Vote[]

  @@map(name: "users")
}

model Content {
  id          String      @id @default(cuid())
  title       String
  contentType ContentType
  content     String      @db.LongText
  isAI        Boolean
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")
  userId      String      @map(name: "user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@map(name: "contents")
}

model Vote {
  id        String   @id @default(cuid())
  vote      Boolean  // true = AI, false = Human
  contentId String   @map(name: "content_id")
  userId    String   @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentId, userId])
  @@map(name: "votes")
}

enum ContentType {
  TEXT
  IMAGE
  MUSIC
  VIDEO
}